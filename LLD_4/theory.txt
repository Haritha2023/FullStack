NodeJs- is a run-time environment for javascript
nodejs-inbuilt modules-https://nodejs.org/api/modules.html
How replacing Java with JavaScript is paying off for PayPal
https://www.zdnet.com/article/how-replacing-java-with-javascript-is-paying-off-for-paypal/

https://github.com/mrinal1224/FJP-3-Dev/tree/master/4_FIle%20System%20Organizer

9/2/2024
--------
ONLY NODE JS IS NOT THE RECOMMENDED OPTION TO WORK AT BACKEND

node: much more boilerplate code

express: framework --- defacto framework 

https://expressjs.com/

https://www.npmjs.com/package/express

steps to install express:
========================

1. open integrated terminal in a folder
create server.js for developement
2. npm init -- enter enter --- it will create a pakage.json
3. npm i express--- create node modulues and package-lock.json and check package.json
    for express and version
4. for every change we need to restart the server for getting the latest
    for the we need to install npm i nodemon
    it will give error so need to install globally
    npx install nodemon
    checking command -- nodemon server.js

    /////TO CREATE A NEW ENTRY BY USING POST METHOD

    1. find which object we need to add new ENTRY
    2. find the particular route to enter the ENTRY
    3. check how it is expecting data, create new object and push to array
    4. need to add some data in the body
    5. in postman post and end point url  send  body click raw
    6. enter the data

2/14/2024
=========
API: application programming interface
it is an interface between client and server to help better communication 

REST API: Rules
=========
1. client and server communication should be there
2. use http protocal and http methods - get, post, put, delete
3. get - read, post - create, put - update, delete - delete
4. post will work for  put, delete also, it will create confusion 
it will work for 1st one

https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/

The action should be indicated by the HTTP request method that we're making. 
The most common methods include GET, POST, PUT, and DELETE.

GET retrieves resources.
POST submits new data to the server.
PUT updates existing data.
DELETE removes data.
The verbs map to CRUD operations.

With the two principles we discussed above in mind, we should create routes like 
GET /articles/ for getting news articles. Likewise, POST /articles/ is for adding a
 new article , PUT /articles/:id is for updating the article with the given id. 
 DELETE /articles/:id is for deleting an existing article with the given ID.

 MIDDLEWARE:
 ==========
 ARE pure js functions. which can be in between the clent and server to process some 
 processing

client send request to middleware, it will check this request is validate or not,
if it is validate it will send the server, or not send to client

- middleware will create id to request
- if authentication fails, we won't get response
- end the request -response cycle
- it will make changes to the request and response objects
- call the middleware function in the stack

TYPES OF MIDDLEWARE:
1. Built in middleware
2. Application level middleware
3. Third party middleware- it will create a middleware like logger need to install

                        ==================
                        DATABASES
                        ==========
                        SQL VS NOSQL
                        -----------
SQL- is a relational database - we can store the data in tabular format
Nosql- not go for SQL
MongoDB- it can store data in documents 

https://www.techtarget.com/searchdatamanagement/definition/MongoDB

                MongoDB
                ========
It can store data in collection - each collection have multiple documents
FOR EXAMPLE: scaler is a database, batches and courses and instructors are collections
full stack, backend, data engeneering are documents
- each document written in json format

MongoDB:
userName: yanamadalaharitha
password:  Rkj7SqWUHsviTSAl


            STEPS TO CREATE MongoDB
            =======================
https://www.mongodb.com/atlas/database

GO to website login with google
-> create organization -- give name of organization
-> select cloud service --- select mongodb atlas---create click
-> create a project -- name a project -- create  a project
-> deploy your database - MO free --- aws -- click on create
-> Security Quickstart - username and password--you can change username-- password should be 
autogenerated preferable- remember - click localhost -- click finish and close - 
goto overview- create user--- need to wait for completion
-> data services -  connect- copy url - paste to db.js -- change the password

                    ===========
                    MONGOOSE
                    ========
npm install mongoose


mongodb go to database -- click on browse collection -- add my own data 
give name to collection -- create 

schema--- is a blue print
it is a rules, how the data should be

model - which was the power to create, delete and update



                            =========
                            MVC-model view controller
                            =========
-> it is just a pattern in which you should organize your code

for example : restaurant model

customer  waiter    chef   storehouse

MVC
clientUI- request go to controller--this controller will go to server(Model)

view<----->controller <----->Model <----->Database
