Important points:
-----------------

------in html page write ! it will give html code structure
------if you want to write same code multiple times "div*4.box#box"
it will give 4 divs with class box and id box
Instructor Github link
https://github.com/mrinal1224/Coolest_batch_fullstack


https://github.com/mrinal1224/JS-Beginner-Notes/tree/main/notes -- JavaScript notes
https://youtu.be/i_23KUAEtUM?si=bH6PaZ6yTXnLXfTb - using git with visual stydio code
https://uicolors.app/create
https://colorhunt.co/
https://coolors.co/
https://www.scaler.com/topics/event-delegation-in-javascript/

-> Link : https://www.scaler.com/topics/javascript/this-keyword-javascript/
https://github.com/kachwalUttamsharma/JS-OOPS-SCALER/tree/main/JS-OOPS/Class-1
https://javascript.info/
https://javascript.info/promise-basics

https://www.educative.io/answers/what-is-promiserace-in-javascript
https://dmitripavlutin.com/promise-all/

1. How internet works?
A.  https://meet.google.com- URL     https-- is protocal
   URL - uniform resource locater
   scaler.com - Domain name --those are unique
   ip- internent protocol- two types- ipv4, ipv6

        https://scaler.com--URL
                |
            Domain name
                |
              DNS - domain name system
                |
            IP address
    
    when we click on link, this DNS system will connect domain name to IP address, 
    these ip addresses are stored in some server, that are placed somewhere else in the world

    there are multiple nodes connected to each other 
    Multiple nodes are working to find the ip address is called ROUTING
    these nodes connected to servers

    we made request we got response

    CLIENT SERVER REQUEST:
    ---------------------

    client- browser is client - which we will make request 
                            routing
    request - url- DNS - IP -------server - response
       |                                      |
       ---------------------------------------


    HTML - Hypertext markup language

    TO CREATE SHOPPING MALL:                SOFTWARE ENGINNERS
    ------------------------                ------------------
    1. Create blue print                    wireframe
    2. structure                            HTML
    3. Design your building                 CSS
    4. Interactivity                        JS 

what is wireframe?
what are symantic tags?
what is srcset?

CSS:

 box-sizing: border-box;
 -----------------------
  /* by using property after adding padding box size won't increase but text inside box will 
  move accordingly */

  https://www.geeksforgeeks.org/css-box-model/
  https://www.w3schools.com/css/css3_box-sizing.asp
  
  https://fonts.google.com/

  9/10/2023 CSS-Position
  ----------------------
  The types of positioning in CSS are-
1)static: this is the default value.We cannot use top,bottom,left and right and
z-index value with static position.
2)relative: the element is positioned relative to its normal position.We can 
move relative element using top,bottom,left and right.
3)absolute: the element is positioned absolutely to its first positioned parent.
We can moved element and provide z-index. For example we position parent relative
and move child using absolute property.

An element with position: absolute; is positioned relative to the nearest positioned 
ancestor (instead of positioned relative to the viewport, like fixed).
however; if an absolute positioned element has no positioned ancestors, it uses the 
document body, and moves along with page scrolling.
Note: Absolute positioned elements are removed from the normal flow, and can overlap 
elements.

4)fixed: the element is positioned related to the browser window.
5)sticky: the element is positioned based on the user's scroll position.After
element goes to scroll position it act as fixed and we give it using top,left,
right,bottom.

FELX box:
---------
https://codingfantasy.com/games/flexboxadventure/play
https://flexboxfroggy.com/
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://developer.mozilla.org/en-US/docs/Web/CSS/position

flex-direction:row 
main axis is x-axis and y-axis is cross axis
so all div's will be aligned to the main axis horizontally

flex-direction:column 
main axis is y-axis and x-axis is cross axis
so all div's will be arraged to the main axis vertically

******* flex is working with main axis
------------------------------
******* align items working with cross axis
------------------------------------ 

HOW WILL YOU CENTER div
========================
display : flex 
flex-direction : row; 
justify-content : center 
align-items : center

https://css-tricks.com/snippets/css/complete-guide-grid/
https://cssgridgarden.com/

12-10-23 Advanced CSS
===============================================================

Specificity Hierarchy
---------------------
Every CSS selector has its place in the specificity hierarchy.

There are four categories which define the specificity level of a selector:

Inline styles - Example: <h1 style="color: pink;">
IDs - Example: #navbar
Classes, pseudo-classes, attribute selectors - Example: .test, :hover, [href]
Elements and pseudo-elements - Example: h1, ::before

https://specificity.keegan.st/

https://www.codecademy.com/resources/docs/css/inheritance

26/10/2023
==========

Query selector
getElementById


Important topics in javascript are
===================================
1. Variables
2. functions
- arrow functions
-high order functions
3. Array and objects
-destructuring , rest , spread 
4.conditional operator
5.optional chaining
6.array methods- map ,filter ,reduce ,sort
7.event listeners - on click , on submit
8. Intervals 
9.callbacks , callbacks hell , promises , promise api
10.async /await 
11. Try /catch

    JavaScript Questions
    =====================
1. what is JavaScript?
A. js is a language of web. It is used creat interactivity with web page
developed by Brendan Eich, developed in 10 days, first js is Livescript
for the popularity of jave, it is named as "JavaScript
    It enables to create dynamically updating content, control multimedia, animated 
images and pretty much everything


1. web development - React js, Angular, nodejs  
2. Mobile application - React native, Iconic
3. Desktop application - electronjs- vscode 
-------------------------------------------------------------------------------------
2. what is difference between let, const, var?
A.  console.log(a)//output: undefined
        a IS ATTACHED WITH THE WINDOW OBJECT
    console.log(b)// output: ReferenceError: cannot access'b' before intialization
        b IS STORED IN TEMPORAL DEAD ZONE(TDZ), IT IS RESERVED SPACE FOR LET AND CONST VARIABLE
    console.log(d) // output: d is not defined
    var a = 100;
    let b = 10 
    let b = 100 //output: syntax error:identifier a is already declared

    Temporal dead zone:(TDZ)
    ------------------- the time phase between hoisting of variable which is intialized
    with let and const and still intiablization of that variable

        1. let and const are hoisted but its memory is allocated at other place than window which cannot be accessed before initialisation.
        2. Temporal Dead Zone exists until variable is declared and assigned a value.
        3. window.variable OR this.variable will not give value of variable defined using let or const.
        4. We cannot redeclare the same variable with let/const(even with using var the second time).
        5. const variable declaration and initialisation must be done on the same line.
        6. There are three types of error: [1] referenceError {given where variable does not have memory allocation} [2] typeError {given when we change type that is not supposed to be changed} [3] syntaxError {when proper syntax(way of writing a statement) is not used}.
        7. Use const wherever possible followed by let, Use var as little as possible(only if you have to). It helps avoid error.
        8. Initialising variables at the top is good idea, helps shrinks TDZ to zero.
--------------------------------------------------------------------------------
3. what is execution context?
A. Everything in javascript happens in execution context
It has two phases 1. memory phase is also known as variable environment
                    variables and functions are stored as key value pairs
                2. code phase is also know as thread of execution
                    in this code is executed line by line
----------------------------------------------------------------------------------

4. what is hoisting?
A. we can access the variables and function before intialization is called hoisting
    getName()//output: Hello world
    console.log(x)// output: undefined
    console.log(y)// output: y is not defined
    greeting()//output: greeting is not a function
    console.log(greeting)// output: undefined
    var x = 7
    function getName() { 
        console.log('Hello World')
    }

    var greeting = ()=>{
        console.log('Good Morning')
    }
    even before executing the code the memory is allocated for variable and function
----------------------------------------------------------------------------
5. How functions are first class citizens?
A. In js both variable and functions are have same priority
we can create a functions as variables
    function sayHi(){
        console.log('Hi')
    }
    sayHi()
    //First class citizens
    let sayHiFc = function(){
        console.log('Hi')
    }
    console.log(sayHiFc)
    sayHiFc()
---------------------------------------------------------------------------------
6. 
3. what is use of nodejs?
4. datatypes in JavaScript?
5. what is variables?
6. what is variable declaration and intiablization?
A. var a // declaration
   a = 15 declaration
7. what is difference between var, let and const?
A. var allows variable declaration and intialization
    let allows no variable declaration and intialization
    const allows no variable declaration and no intialization
8. what is null and undefined?
A. undefined: when we did not intialize the variable
    null: when we do not intialize the variable specifically to give null
9. what is event bubbling and event capturing?

                                    26/10/23
                                    ========
1. What is DOM?
A. Document Object model
   - Every html element has a tree structure is known as a DOM
    - Document -> Root element(html) -> head , body -> childern elements
    - By using tree sructure you can traverse efficiently though the different nodes
    - DOM is responsible for the interactivity for the web page

